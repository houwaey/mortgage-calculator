import java.text.SimpleDateFormat

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

plugins {
    id 'java-library'
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.adarshr.test-logger' version '2.1.1'
    id 'jacoco'
}

sourceCompatibility = JavaVersion.VERSION_12
targetCompatibility = JavaVersion.VERSION_12

group = 'ph.com.poc'
archivesBaseName = 'pdfbox-poc'
version = '1.0.0-SNAPSHOT'

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    /* Lombok */
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
}

jar {
    manifest {
        attributes(
            'Implementation-Title': archivesBaseName,
            'Implementation-Version': archiveVersion,
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),
            'Build-Vendor'	 : "CodingLabs Tech.",
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

testlogger {
    theme 'mocha'
    showExceptions true
    showStackTraces true
    showFullStackTraces false
    showCauses true
    slowThreshold 2000
    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
    logLevel 'lifecycle'
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

/*
 * Reference:
 * https://docs.gradle.org/current/userguide/java_testing.html
 * https://github.com/radarsh/gradle-test-logger-plugin
 *
 *
 *  # specific class
 * gradle test --tests org.gradle.SomeTestClass
 *
 * # specific class and method
 * gradle test --tests org.gradle.SomeTestClass.someSpecificMethod
 *
 * # method name containing spaces
 * gradle test --tests "org.gradle.SomeTestClass.some method containing spaces"
 *
 * # all classes at specific package (recursively)
 * gradle test --tests 'all.in.specific.package*'
 *
 * # specific method at specific package (recursively)
 * gradle test --tests 'all.in.specific.package*.someSpecificMethod'
 *
 * gradle test --tests '*IntegTest'
 *
 * gradle test --tests '*IntegTest*ui*'
 *
 * gradle test --tests '*ParameterizedTest.foo*'
 *
 * # the second iteration of a parameterized test
 * gradle test --tests '*ParameterizedTest.*[2]'
 *
 * */
test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}
